import json

import pygame

from config import *

def load_character_anim_data():
    ''' Parses the json data generated by aseprite and returns a dict of 
        animations containing lists of frame surfs loaded from the spritesheet.
    '''
    spritesheet = pygame.image.load('data/character_anim.png').convert_alpha()
    anim_dict = {}  # key = anim name, value = list of pygame.Surface() objects

    with open('data/character_anim.json') as infile:
        json_data = json.load(infile)
        for key in json_data['frames'].keys():
            anim_name = ''  # key for anim_dict
            i = 0
            while key[i].isalpha():
                anim_name += key[i]
                i += 1

            if anim_name not in anim_dict:
                anim_dict[anim_name] = []
            
            frame_size = (json_data['frames'][key]['sourceSize']['w'],
                          json_data['frames'][key]['sourceSize']['h'])
            frame = pygame.Surface(frame_size)
            frame.set_colorkey((0,0,0))
            frame_data = json_data['frames'][key]['frame']
            area = (frame_data['x'], frame_data['y'],
                    frame_data['w'], frame_data['h'])
            frame.blit(spritesheet, (0,0), area)
            frame = pygame.transform.scale_by(frame, SCALE_FACTOR)
            anim_dict[anim_name].append(frame)

    for key, value in anim_dict.items():
        print(key + ', ' + str(len(value)))
    
    return anim_dict


class Player(pygame.sprite.Sprite):
    def __init__(self, console):
        super().__init__()

        # movement
        self.direction = pygame.math.Vector2()
        self.position = pygame.math.Vector2(SCREEN_CENTER)
        self.speed = PLAYER_SPEED

        # setup graphics and anim data
        self.anim_frames = load_character_anim_data()
        self.anim = self.anim_frames['idle']  # NOTE: Change animation.
        self.frame = 0                        # NOTE: Reset animation.
        self.frame_timer = 0
        self.frame_duration = 0.075  # in seconds (75 ms per frame)

        # setup sprite data
        self.image = self.anim[self.frame]
        self.rect = self.image.get_rect(center = SCREEN_CENTER)
    
    def input(self):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_UP] or keys[pygame.K_w]:
            self.direction.y = -1
        elif keys[pygame.K_DOWN] or keys[pygame.K_s]:
            self.direction.y = 1
        else:
            self.direction.y = 0

        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.direction.x = -1
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.direction.x = 1
        else:
            self.direction.x = 0
    
    def move(self, dt):
        # normalize direction for const speed with diagonal movement
        if self.direction.magnitude() > 0:
            self.direction = self.direction.normalize()

		# horizontal & vertical movement
        self.position.x += self.direction.x * self.speed * dt
        self.rect.centerx = round(self.position.x)
        self.position.y += self.direction.y * self.speed * dt
        self.rect.centery = round(self.position.y)

    def update(self, delta_time):
        self.input()
        self.move(delta_time)

        # animate
        self.frame_timer += delta_time
        if self.frame_timer >= self.frame_duration:
            self.frame_timer -= self.frame_duration
            self.frame += 1
        if self.frame == len(self.anim):
            self.frame = 0
        self.image = self.anim[self.frame]
